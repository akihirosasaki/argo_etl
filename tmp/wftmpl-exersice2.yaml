apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: wftmpl-exercise2
  namespace: argo
spec:
  entrypoint: dags-template
  volumes:
  - name: exercise2-secret
    secret:
      secretName: exercise2-secret
  arguments:
    parameters:
    - name: word-detect
      value: bomb
  templates:
  - name: dags-template
    inputs:
      parameters:
      - name: word-detect
    dag:
      tasks:
      - name: get-source
        template: get-source-template
      - name: read-emails
        dependencies: [get-source]
        arguments:
          artifacts: [{name: text, from: "{{tasks.get-source.outputs.artifacts.emails-csv}}"}]
        template: read-emails-template
      - name: loop
        dependencies: [read-emails]
        arguments:
          parameters:
          - name: word-detect
            value: "{{inputs.parameters.word-detect}}"
          - name: text
            value: "{{item.text}}"
          - name: sender
            value: "{{item.sender}}"
        withParam: "{{tasks.read-emails.outputs.result}}"
        template: loop-template
          
  - name: get-source-template
    script:
      image: ubuntu:20.04
      command: [sh]
      source: |
        apt-get update;
        apt-get install -y curl;
        mkdir source-file;
        cd source-file;
        curl $SOURCE_URL -o emails.csv;
      env: 
      - name: SOURCE_URL
        valueFrom: 
          secretKeyRef:
            name: exercise2-secret
            key: source_url
    outputs:
      artifacts:
      - name: emails-csv
        path: /source-file/emails.csv
  
  - name: read-emails-template
    inputs:
      artifacts:
      - name: text
        path: /source-file/emails.csv
    script:
      image: python:3.8-slim
      command: [python]
      source: |
        import json;
        import sys;
        with open("/source-file/emails.csv", "r") as f:
          lines = f.readlines();
          lines = [x.strip().split(";") for x in lines];
          json.dump([{lines[0][0]: i[0].strip('"'), lines[0][1]: i[1]} for i in lines[1:]], sys.stdout) 
  
  - name: loop-template
    inputs:
      parameters:
      - name: text
      - name: sender
      - name: word-detect
    dag:
      tasks:
      - name: detect
        arguments:
          parameters:
          - name: word-detect
            value: "{{inputs.parameters.word-detect}}"
          - name: text
            value: "{{inputs.parameters.text}}"
        template: detect-template
      - name: email-detected
        depends: detect.Succeeded
        arguments:
          parameters:
          - name: text
            value: "{{inputs.parameters.text}}"
          - name: sender
            value: "{{inputs.parameters.sender}}"
        template: email-detected-template
        when: "{{tasks.detect.outputs.result}} == DETECTED"
    
  - name: detect-template
    inputs:
      parameters:
      - name: text
      - name: word-detect
    script:
      image: python:3.8-slim
      command: [python]
      source: |
        if "{{inputs.parameters.word-detect}}" in "{{inputs.parameters.text}}":
          print("DETECTED")
        else: print("OK")
  
  - name: email-detected-template
    inputs:
      parameters:
      - name: text
      - name: sender
    script:
      image: python:3.8-slim
      command: [python]
      source: |
        with open("/secrets/notification_email", "r") as f:
           notification_email = f.read()
        print("Send notification email to ", notification_email, " with the content: ")
        print("Sender: ", "{{inputs.parameters.sender}}}")
        print("Text: ", "{{inputs.parameters.text}}}")
        f = open("/tmp/email_detected.txt", "w")
        f.write("Sender: {{inputs.parameters.sender}}}")
        f.write("Text: {{inputs.parameters.text}}}")
        f.close()
      volumeMounts:
      - name: exercise2-secret
        mountPath: "/secrets"
    outputs:
      artifacts:
      - name: email-detected
        path: /tmp/email_detected.txt
    
    